// Prisma schema (initial) for AutoSouq
// Expand with more relations & constraints iteratively

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  guest
  buyer
  seller
  admin
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  passwordHash String?
  displayName String?
  role      UserRole  @default(buyer)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  seller    Seller?
  orders    Order[]
  reviews   Review[]
  carts     Cart[]
}

model Seller {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  kycStatus   String   @default("pending")
  companyName String?
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Make {
  id      String   @id @default(cuid())
  name    String   @unique
  models  Model[]
}

model Model {
  id      String   @id @default(cuid())
  name    String
  makeId  String
  make    Make     @relation(fields: [makeId], references: [id])
  years   Year[]
  @@unique([makeId, name])
}

model Year {
  id       String   @id @default(cuid())
  value    Int
  modelId  String
  model    Model    @relation(fields: [modelId], references: [id])
  engines  Engine[]
  @@unique([modelId, value])
}

model Engine {
  id      String   @id @default(cuid())
  code    String
  yearId  String
  year    Year     @relation(fields: [yearId], references: [id])
  products ProductFitment[]
  @@unique([yearId, code])
}

model Product {
  id             String            @id @default(cuid())
  name           String
  slug           String            @unique
  description    String?
  sku            String            @unique
  oemCode        String?
  aftermarketCode String?
  priceCents     Int
  currency       String            @default("LYD")
  stock          Int               @default(0)
  sellerId       String?
  seller         Seller?           @relation(fields: [sellerId], references: [id])
  images         ProductImage[]
  fitments       ProductFitment[]
  reviews        Review[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  position  Int      @default(0)
}

model ProductFitment {
  id         String  @id @default(cuid())
  productId  String
  engineId   String
  product    Product @relation(fields: [productId], references: [id])
  engine     Engine  @relation(fields: [engineId], references: [id])
  @@unique([productId, engineId])
}

model Cart {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  items     CartItem[]
  active    Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  priceCents Int
  currency  String   @default("LYD")
  @@unique([cartId, productId])
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  status       String      @default("pending")
  paymentMethod String     @default("COD")
  totalCents   Int
  currency     String      @default("LYD")
  items        OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  priceCents Int
  currency   String   @default("LYD")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@unique([userId, productId])
}
